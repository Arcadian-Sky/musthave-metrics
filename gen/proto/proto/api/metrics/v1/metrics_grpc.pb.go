// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/api/metrics/v1/metrics.proto

package protometrics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsServiceClient is the client API for MetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsServiceClient interface {
	// Получает метрику
	GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error)
	// Получает метрики
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	GetMetricsRoot(ctx context.Context, in *GetMetricsRootRequest, opts ...grpc.CallOption) (*GetMetricsRootResponse, error)
	// Получает метрики
	GetJSONMetrics(ctx context.Context, in *GetJSONMetricsRequest, opts ...grpc.CallOption) (*GetJSONMetricsResponse, error)
	// Обновляет метрики через JSON
	UpdateJSONMetrics(ctx context.Context, in *UpdateJSONMetricsRequest, opts ...grpc.CallOption) (*UpdateJSONMetricsResponse, error)
	// Обновляет метрику (для маршрута /update/)
	UpdateJSONMetric(ctx context.Context, in *UpdateJSONMetricRequest, opts ...grpc.CallOption) (*UpdateJSONMetricResponse, error)
	// Обновляет метрику
	UpdateMetric(ctx context.Context, in *UpdateMetricRequest, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
	// Проверяет соединение с базой данных
	PingDB(ctx context.Context, in *PingDBRequest, opts ...grpc.CallOption) (*PingDBResponse, error)
}

type metricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsServiceClient(cc grpc.ClientConnInterface) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error) {
	out := new(GetMetricResponse)
	err := c.cc.Invoke(ctx, "/proto.api.metrics.v1.MetricsService/GetMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/proto.api.metrics.v1.MetricsService/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) GetMetricsRoot(ctx context.Context, in *GetMetricsRootRequest, opts ...grpc.CallOption) (*GetMetricsRootResponse, error) {
	out := new(GetMetricsRootResponse)
	err := c.cc.Invoke(ctx, "/proto.api.metrics.v1.MetricsService/GetMetricsRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) GetJSONMetrics(ctx context.Context, in *GetJSONMetricsRequest, opts ...grpc.CallOption) (*GetJSONMetricsResponse, error) {
	out := new(GetJSONMetricsResponse)
	err := c.cc.Invoke(ctx, "/proto.api.metrics.v1.MetricsService/GetJSONMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) UpdateJSONMetrics(ctx context.Context, in *UpdateJSONMetricsRequest, opts ...grpc.CallOption) (*UpdateJSONMetricsResponse, error) {
	out := new(UpdateJSONMetricsResponse)
	err := c.cc.Invoke(ctx, "/proto.api.metrics.v1.MetricsService/UpdateJSONMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) UpdateJSONMetric(ctx context.Context, in *UpdateJSONMetricRequest, opts ...grpc.CallOption) (*UpdateJSONMetricResponse, error) {
	out := new(UpdateJSONMetricResponse)
	err := c.cc.Invoke(ctx, "/proto.api.metrics.v1.MetricsService/UpdateJSONMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) UpdateMetric(ctx context.Context, in *UpdateMetricRequest, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, "/proto.api.metrics.v1.MetricsService/UpdateMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) PingDB(ctx context.Context, in *PingDBRequest, opts ...grpc.CallOption) (*PingDBResponse, error) {
	out := new(PingDBResponse)
	err := c.cc.Invoke(ctx, "/proto.api.metrics.v1.MetricsService/PingDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServiceServer is the server API for MetricsService service.
// All implementations should embed UnimplementedMetricsServiceServer
// for forward compatibility
type MetricsServiceServer interface {
	// Получает метрику
	GetMetric(context.Context, *GetMetricRequest) (*GetMetricResponse, error)
	// Получает метрики
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	GetMetricsRoot(context.Context, *GetMetricsRootRequest) (*GetMetricsRootResponse, error)
	// Получает метрики
	GetJSONMetrics(context.Context, *GetJSONMetricsRequest) (*GetJSONMetricsResponse, error)
	// Обновляет метрики через JSON
	UpdateJSONMetrics(context.Context, *UpdateJSONMetricsRequest) (*UpdateJSONMetricsResponse, error)
	// Обновляет метрику (для маршрута /update/)
	UpdateJSONMetric(context.Context, *UpdateJSONMetricRequest) (*UpdateJSONMetricResponse, error)
	// Обновляет метрику
	UpdateMetric(context.Context, *UpdateMetricRequest) (*UpdateMetricResponse, error)
	// Проверяет соединение с базой данных
	PingDB(context.Context, *PingDBRequest) (*PingDBResponse, error)
}

// UnimplementedMetricsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMetricsServiceServer struct {
}

func (UnimplementedMetricsServiceServer) GetMetric(context.Context, *GetMetricRequest) (*GetMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (UnimplementedMetricsServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedMetricsServiceServer) GetMetricsRoot(context.Context, *GetMetricsRootRequest) (*GetMetricsRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricsRoot not implemented")
}
func (UnimplementedMetricsServiceServer) GetJSONMetrics(context.Context, *GetJSONMetricsRequest) (*GetJSONMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJSONMetrics not implemented")
}
func (UnimplementedMetricsServiceServer) UpdateJSONMetrics(context.Context, *UpdateJSONMetricsRequest) (*UpdateJSONMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJSONMetrics not implemented")
}
func (UnimplementedMetricsServiceServer) UpdateJSONMetric(context.Context, *UpdateJSONMetricRequest) (*UpdateJSONMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJSONMetric not implemented")
}
func (UnimplementedMetricsServiceServer) UpdateMetric(context.Context, *UpdateMetricRequest) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetric not implemented")
}
func (UnimplementedMetricsServiceServer) PingDB(context.Context, *PingDBRequest) (*PingDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDB not implemented")
}

// UnsafeMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServiceServer will
// result in compilation errors.
type UnsafeMetricsServiceServer interface {
	mustEmbedUnimplementedMetricsServiceServer()
}

func RegisterMetricsServiceServer(s grpc.ServiceRegistrar, srv MetricsServiceServer) {
	s.RegisterService(&MetricsService_ServiceDesc, srv)
}

func _MetricsService_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.metrics.v1.MetricsService/GetMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetMetric(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.metrics.v1.MetricsService/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_GetMetricsRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetMetricsRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.metrics.v1.MetricsService/GetMetricsRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetMetricsRoot(ctx, req.(*GetMetricsRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_GetJSONMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJSONMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetJSONMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.metrics.v1.MetricsService/GetJSONMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetJSONMetrics(ctx, req.(*GetJSONMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_UpdateJSONMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJSONMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).UpdateJSONMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.metrics.v1.MetricsService/UpdateJSONMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).UpdateJSONMetrics(ctx, req.(*UpdateJSONMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_UpdateJSONMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJSONMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).UpdateJSONMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.metrics.v1.MetricsService/UpdateJSONMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).UpdateJSONMetric(ctx, req.(*UpdateJSONMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_UpdateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).UpdateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.metrics.v1.MetricsService/UpdateMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).UpdateMetric(ctx, req.(*UpdateMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_PingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).PingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.metrics.v1.MetricsService/PingDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).PingDB(ctx, req.(*PingDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsService_ServiceDesc is the grpc.ServiceDesc for MetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.metrics.v1.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetric",
			Handler:    _MetricsService_GetMetric_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _MetricsService_GetMetrics_Handler,
		},
		{
			MethodName: "GetMetricsRoot",
			Handler:    _MetricsService_GetMetricsRoot_Handler,
		},
		{
			MethodName: "GetJSONMetrics",
			Handler:    _MetricsService_GetJSONMetrics_Handler,
		},
		{
			MethodName: "UpdateJSONMetrics",
			Handler:    _MetricsService_UpdateJSONMetrics_Handler,
		},
		{
			MethodName: "UpdateJSONMetric",
			Handler:    _MetricsService_UpdateJSONMetric_Handler,
		},
		{
			MethodName: "UpdateMetric",
			Handler:    _MetricsService_UpdateMetric_Handler,
		},
		{
			MethodName: "PingDB",
			Handler:    _MetricsService_PingDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/metrics/v1/metrics.proto",
}
