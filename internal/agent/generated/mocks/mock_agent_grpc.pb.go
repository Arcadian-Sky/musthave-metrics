// Code generated by MockGen. DO NOT EDIT.
// Source: internal/agent/generated/protoagent/agent_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	protoagent "github.com/Arcadian-Sky/musthave-metrics/internal/agent/generated/protoagent"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAgentServiceClient is a mock of AgentServiceClient interface.
type MockAgentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgentServiceClientMockRecorder
}

// MockAgentServiceClientMockRecorder is the mock recorder for MockAgentServiceClient.
type MockAgentServiceClientMockRecorder struct {
	mock *MockAgentServiceClient
}

// NewMockAgentServiceClient creates a new mock instance.
func NewMockAgentServiceClient(ctrl *gomock.Controller) *MockAgentServiceClient {
	mock := &MockAgentServiceClient{ctrl: ctrl}
	mock.recorder = &MockAgentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentServiceClient) EXPECT() *MockAgentServiceClientMockRecorder {
	return m.recorder
}

// SendMetric mocks base method.
func (m *MockAgentServiceClient) SendMetric(ctx context.Context, in *protoagent.MetricRequest, opts ...grpc.CallOption) (*protoagent.MetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMetric", varargs...)
	ret0, _ := ret[0].(*protoagent.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMetric indicates an expected call of SendMetric.
func (mr *MockAgentServiceClientMockRecorder) SendMetric(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetric", reflect.TypeOf((*MockAgentServiceClient)(nil).SendMetric), varargs...)
}

// SendMetricJSON mocks base method.
func (m *MockAgentServiceClient) SendMetricJSON(ctx context.Context, in *protoagent.MetricJSONRequest, opts ...grpc.CallOption) (*protoagent.MetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMetricJSON", varargs...)
	ret0, _ := ret[0].(*protoagent.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMetricJSON indicates an expected call of SendMetricJSON.
func (mr *MockAgentServiceClientMockRecorder) SendMetricJSON(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetricJSON", reflect.TypeOf((*MockAgentServiceClient)(nil).SendMetricJSON), varargs...)
}

// MockAgentServiceServer is a mock of AgentServiceServer interface.
type MockAgentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAgentServiceServerMockRecorder
}

// MockAgentServiceServerMockRecorder is the mock recorder for MockAgentServiceServer.
type MockAgentServiceServerMockRecorder struct {
	mock *MockAgentServiceServer
}

// NewMockAgentServiceServer creates a new mock instance.
func NewMockAgentServiceServer(ctrl *gomock.Controller) *MockAgentServiceServer {
	mock := &MockAgentServiceServer{ctrl: ctrl}
	mock.recorder = &MockAgentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentServiceServer) EXPECT() *MockAgentServiceServerMockRecorder {
	return m.recorder
}

// SendMetric mocks base method.
func (m *MockAgentServiceServer) SendMetric(arg0 context.Context, arg1 *protoagent.MetricRequest) (*protoagent.MetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetric", arg0, arg1)
	ret0, _ := ret[0].(*protoagent.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMetric indicates an expected call of SendMetric.
func (mr *MockAgentServiceServerMockRecorder) SendMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetric", reflect.TypeOf((*MockAgentServiceServer)(nil).SendMetric), arg0, arg1)
}

// SendMetricJSON mocks base method.
func (m *MockAgentServiceServer) SendMetricJSON(arg0 context.Context, arg1 *protoagent.MetricJSONRequest) (*protoagent.MetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetricJSON", arg0, arg1)
	ret0, _ := ret[0].(*protoagent.MetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMetricJSON indicates an expected call of SendMetricJSON.
func (mr *MockAgentServiceServerMockRecorder) SendMetricJSON(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetricJSON", reflect.TypeOf((*MockAgentServiceServer)(nil).SendMetricJSON), arg0, arg1)
}

// mustEmbedUnimplementedAgentServiceServer mocks base method.
func (m *MockAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAgentServiceServer")
}

// mustEmbedUnimplementedAgentServiceServer indicates an expected call of mustEmbedUnimplementedAgentServiceServer.
func (mr *MockAgentServiceServerMockRecorder) mustEmbedUnimplementedAgentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAgentServiceServer", reflect.TypeOf((*MockAgentServiceServer)(nil).mustEmbedUnimplementedAgentServiceServer))
}

// MockUnsafeAgentServiceServer is a mock of UnsafeAgentServiceServer interface.
type MockUnsafeAgentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAgentServiceServerMockRecorder
}

// MockUnsafeAgentServiceServerMockRecorder is the mock recorder for MockUnsafeAgentServiceServer.
type MockUnsafeAgentServiceServerMockRecorder struct {
	mock *MockUnsafeAgentServiceServer
}

// NewMockUnsafeAgentServiceServer creates a new mock instance.
func NewMockUnsafeAgentServiceServer(ctrl *gomock.Controller) *MockUnsafeAgentServiceServer {
	mock := &MockUnsafeAgentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAgentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAgentServiceServer) EXPECT() *MockUnsafeAgentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAgentServiceServer mocks base method.
func (m *MockUnsafeAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAgentServiceServer")
}

// mustEmbedUnimplementedAgentServiceServer indicates an expected call of mustEmbedUnimplementedAgentServiceServer.
func (mr *MockUnsafeAgentServiceServerMockRecorder) mustEmbedUnimplementedAgentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAgentServiceServer", reflect.TypeOf((*MockUnsafeAgentServiceServer)(nil).mustEmbedUnimplementedAgentServiceServer))
}
