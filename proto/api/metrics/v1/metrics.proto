//protoc -I $GOPATH/pkg/mod/github.com/googleapis/googleapis@latest/ -I . --grpc-gateway_out . --grpc-gateway_opt logtostderr=true --grpc-gateway_opt paths=source_relative service.proto
//protoc -I proto/googleapi/ -I proto/. --grpc-gateway_out=. --grpc-gateway_opt=logtostderr=true --grpc-gateway_opt=paths=source_relative metrics.proto
syntax = "proto3";

package proto.api.metrics.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "internal/server/handler/protometrics";

enum Type {
  TYPE_UNSPECIFIED = 0;
  TYPE_GAUGE = 1;
  TYPE_CIUNTER = 2;
}

// Определение метрики
message Metric {
  string id = 1;
  Type type = 2;
  oneof value {
    int64 delta = 3;
    double gvalue = 4;
  }
}

message UpdateMetricRequest {
  string id = 1;
  Type type = 2;
  string value = 3;
}
message GetMetricsRootResponse {
  Metric metric = 1;
}

message UpdateJSONMetricRequest {
  Metric metric = 1;
}
message UpdateJSONMetricResponse {
  Metric metric = 1;
}

// Ответ для получения метрик
message GetMetricsResponse {
  repeated Metric metrics = 1;
}

// Запрос для обновления метрик через JSON
message UpdateJSONMetricsRequest {
  repeated Metric metrics = 1;
}

// Ответ для обновления метрик через JSON
message UpdateJSONMetricsResponse {
  repeated Metric metrics = 1;
}

// Ответ для обновления метрики
message UpdateMetricResponse {
  repeated Metric metrics = 1;
}

// Запрос для получения метрики
message GetMetricRequest {
  Type type = 1;
  string id = 2;
}

// Ответ для получения метрики
message GetMetricResponse {
  oneof value {
    int64 delta = 1;
    double gvalue = 2;
  }
}

// Ответ для получения метрики
message GetJSONMetricsResponse {
  repeated Metric metrics = 1;
}

message PingDBRequest {}
message GetMetricsRequest {}
message GetMetricsRootRequest {}
message GetJSONMetricsRequest {}

// Ответ для проверки соединения с базой данных
message PingDBResponse {
  string message = 1;
}

service MetricsService {
  // Получает метрику
  rpc GetMetric(GetMetricRequest) returns (GetMetricResponse) {
    option (google.api.http) = {get: "/value/{type}/{id}"};
  }

  // Получает метрики
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {get: "/value"};
  }

  rpc GetMetricsRoot(GetMetricsRootRequest) returns (GetMetricsRootResponse) {
    option (google.api.http) = {get: "/"};
  }

  // Получает метрики
  rpc GetJSONMetrics(GetJSONMetricsRequest) returns (GetJSONMetricsResponse) {
    option (google.api.http) = {post: "/value"};
  }

  // Обновляет метрики через JSON
  rpc UpdateJSONMetrics(UpdateJSONMetricsRequest) returns (UpdateJSONMetricsResponse) {
    option (google.api.http) = {
      post: "/updates"
      body: "*"
    };
  }

  // Обновляет метрику (для маршрута /update/)
  rpc UpdateJSONMetric(UpdateJSONMetricRequest) returns (UpdateJSONMetricResponse) {
    option (google.api.http) = {
      post: "/update"
      body: "*"
    };
  }

  // Обновляет метрику
  rpc UpdateMetric(UpdateMetricRequest) returns (UpdateMetricResponse) {
    option (google.api.http) = {
      post: "/update/{type}/{id}/{value}"
      body: "*"
    };
  }

  // Проверяет соединение с базой данных
  rpc PingDB(PingDBRequest) returns (PingDBResponse) {
    option (google.api.http) = {get: "/ping"};
  }
}
